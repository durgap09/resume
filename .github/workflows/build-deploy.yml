# NOTE: This depends on AWS resources deployed for the "joshbeard.me" website.
# Refer to https://github.com/joshbeard/joshbeard.me-tf-aws
name: Build
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Checksums of static assets
        run: |
          echo "STYLE_SHA=$(sha256sum dist/assets/css/style.css | head -c 16)" >> $GITHUB_ENV
          echo "FONTAWESOME_SHA=$(sha256sum dist/assets/fonts/fa/css/all.css | head -c 16)" >> $GITHUB_ENV

      - name: Generate HTML
        uses: docker://pandoc/core:2.17
        with:
          args: >
            --from markdown --to html README.md
            -o dist/index.html
            -H src/_includes/header.html
            -B src/_includes/body.html
            -A src/_includes/footer.html
            -c /resume/assets/css/style.css?v=${{ env.STYLE_SHA }}
            -c /resume/assets/fonts/fa/css/brands.min.css?v=${{ env.FONTAWESOME_SHA }}
            -c /resume/assets/fonts/fa/css/fontawesome.min.css?v=${{ env.FONTAWESOME_SHA }}
            -c /resume/assets/fonts/fa/css/regular.min.css?v=${{ env.FONTAWESOME_SHA }}
            -c /resume/assets/fonts/fa/css/solid.min.css?v=${{ env.FONTAWESOME_SHA }}
            --metadata title="Josh Beard"

      - name: Generate Word Document
        uses: docker://pandoc/latex
        with:
          args: >
            --from markdown --to docx README.md
            -f gfm
            -o dist/Josh-Beard-Resume.docx

      - name: Generate PDF Document
        uses: browser-actions/setup-chrome@latest
      - run: >
          chrome
          -headless
          -disable-gpu
          --no-sandbox
          --print-to-pdf=dist/Josh-Beard-Resume.pdf
          --print-to-pdf-no-header
          dist/index.html

      - name: Minify Action
        uses: anthonyftwang/minify-action@v1.0.1

      - uses: actions/upload-artifact@master
        with:
          name: src
          path: |
            dist/

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/download-artifact@master
        with:
          name: src
      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete --cache-control max-age=604800
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-west-2'
          SOURCE_DIR: '.'
          DEST_DIR: "resume/"

      - name: Set up AWSCLI
        uses: hsupu/setup-awscli@v1

      - name: Set cache on S3 objects
        run: |
          aws s3 cp s3://s3-website-joshbeard-me/resume/assets/ s3://s3-website-joshbeard-me/resume/assets/ --recursive --acl public-read --cache-control max-age=15552000
          for f in index.html Josh-Beard-Resume.pdf Josh-Beard-Resume.docx; do
            aws s3 cp s3://${{ secrets.AWS_S3_BUCKET }}/resume/${f} s3://${{ secrets.AWS_S3_BUCKET }}/resume/ --acl public-read --cache-control max-age=1209600
          done
        env:
          # https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-west-2'

      - name: Invalidate CloudFront Cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CF_DISTRIBUTION }}
          PATHS: "/resume*"
          AWS_REGION: "us-east-1"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}